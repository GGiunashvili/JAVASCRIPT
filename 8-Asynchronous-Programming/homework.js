// ### სავარჯიშოები

// 1. დაწერეთ ფუნქცია, რომელიც პარამეტრად იღებს callback ფუქნციას და იძხებს მას 1 წამის შემდეგ.
  
// function delayedExecution(callback) {
//     setTimeout(() => {
//       callback();
//     }, 1000);
//   }
  
//   // გამოყენების მაგალითი:
//   delayedExecution(() => {
//     console.log("Callback ფუნქცია გამოიძახა 1 წამის შემდეგ!");
//   });

//   function executeAfterDelay(callback) {
//     setTimeout(() => {
//       console.log("1 წამი გავიდა, ახლა გამოვიძახებ callback ფუნქციას...");
//       callback();
//     }, 1000);
//   }
  
//   // გამოყენების მაგალითი:
//   function myCallbackFunction() {
//     console.log("ეს არის callback ფუნქცია, რომელიც გამოიძახეს 1 წამის შემდეგ.");
//   }
  
//   executeAfterDelay(myCallbackFunction);
  
  

// 2. დაწერეთ ფუქნცია, რომელიც არგუმენტად მიიღებს ორ რიცხვს და ორ ქოლბექ ფუქნციას. 
// თუ პირველი რიცხვი მეტია მეორეზე, გამოიძახეთ პირველი ქოლბექი, თუარადა გამოიძხეთ მეორე ქოლბექ ფუნქცია.

// function x (a, b, callback1, callback2){
//     if(a > b){
//         callback1();
//     } else{
//         callback2();
//     }
// }

// x(
//     30,
//     20,
//     () => console.log("true callback1"), // passing a function
//     () => console.log("false callback2")  // passing a function
// )


// 3. დაწერეთ ფუნქცია, რომელიც პარამეტრებად იღებს მასივს, რიცხვს და callback ფუქნციას. 
// callback ფუნქციის გამოძახების შემდეგ მასივში უნდა ჩაიფუშოს რიცხვი და დაბრუნოს განახლებული მასივი. 
// მინიშნება: callback ფუნქციას გამოძახებისას არგუმენტებად გაატანეთ მასივი და რიცხვი, რომელიც მასივში უნდა ჩაიფუშოს.

// function updateArray(arr, num, callback) {
//     // ვიძახებთ callback ფუნქციას არგუმენტებით: მასივი და რიცხვი
//     callback(arr, num);
//     // ჩაგვყავს რიცხვი მასივში
//     arr.push(num);
//     // ვაბრუნებთ განახლებულ მასივს
//     return arr;
// }
// // მაგალითი callback ფუნქციის
// function logArrayAndNumber(arr, num) {
//     console.log("მოცემული მასივი:", arr);
//     console.log("ჩასაფუშავი რიცხვი:", num);
// }
// // ფუნქციის გამოძახება
// const result = updateArray([1, 2, 3], 4, logArrayAndNumber);
// console.log("განახლებული მასივი:", result);



// 4. შექმენით ფრომისი, რომელიც დარეზოლვდება 2 წამის შემდეგ და გამოიტანს წარამტების შეტყობინებას.

const myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("წარმატება: ფრომისი წარმატებით შესრულდა!");
    }, 2000); // 2 წამის შემდეგ
});

myPromise.then((resolved) => {
    console.log(resolved);
});


function delayedSuccess() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("წარმატება: ფრომისი წარმატებით შესრულდა!");
        }, 2000); // 2 წამის შემდეგ
    });
}

async function executeAsync() {
    const message = await delayedSuccess();
    console.log(message);
}

executeAsync();



// 5. შექმენით ფრომისი, რომელიც დარეზოლვდება ან დარეჯექთდება 3 წამის შემდეგ. დარეზოლვდეს თუ იუზერი სრულწლოვანია და დარეჯექთდეს - თუ არაა.
// 6. შექმენით ფრომისი, რომელიც დაარეზოლვებს შემთხვევების 50%-ში და დანარჩენ 50%-ში დაარეჯექთებს. დაუმკლავდით ორივე ვარიანტს then და catch-ით.
// 7. შექმენით Promise Chain (მინიმუმ 3 ფრომისით), სადაც თითოეული დარეზოლვდება 1 წამში და გამოიტანს განსხვავებულ წარმატების შეტყობინებებს.
// 8. შექმენით ორი ფრომისი. პირველმა დაარეზოლვოს რიცხვი და მეორემ დარეზოლვებული რიცხვი გაამრავლოს 2-ზე. გამოიყენეთ promise chaining.
// 9. დაწერეთ პროგრამა, რომელიც მომხმარებელს შეეკითხება დადებით რიცხვს და დაითვლის მაგ რიცხვამდე. თითოეული რიცხვი უნდა გამოკონსოლდეს 1 წამის ინტერვალით.
// 10. დაწერეთ პროგრამა, რომელიც მომხმარბელს შეეკითხება თავისი გითჰაბის იუზერნეიმს და წამოიღებს მის ინფორმაციას გითჰაბის API-დან. API ლინკი - https://api.github.com/users/[username], მაგალითად: https://api.github.com/users/temuritsutskiridze. ჯერ გამოიყენეთ then/catch და შემდეგ async/await.
// 11. დაწერეთ პროგრამა, რომელსაც API-დან მოაქვს ორი განსხვავებული ინფორმაცია და დაბეჭდოს, როდესაც ორივეს მიიღებს
// 12. დაწერეთ პროგრამა, რომელიც API-დან წამოიღებს სამ განსხვავებულ დატას და დაბეჭდავს იმას, რომელსაც ყველაზე მალე მიიღებს.